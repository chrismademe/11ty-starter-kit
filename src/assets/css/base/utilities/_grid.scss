@use '../tokens';
@use '../mixins';

$columns: 12 !default;
$rows: 12 !default;

.grid {
	--cols: #{$columns};
	--rows: auto;
	--gap: var(--space-4);

	display: grid;
	grid-template-columns: repeat(var(--cols), 1fr);
	grid-template-rows: repeat(var(--rows), 1fr);
	gap: var(--gap);
}

@include mixins.responsive-util-from-map(
	'gap',
	'--gap',
	map-get(tokens.$tokens, 'space')
);

@for $i from 1 through $columns {
	.cols-#{$i} {
		--cols: #{$i};
	}

	.col-span-#{$i} {
		grid-column-end: span $i;
	}

	.col-start-#{$i} {
		grid-column-start: $i;
	}
}

@each $bp, $size in tokens.$breakpoints {
	@media (min-width: $size) {
		@for $i from 1 through $columns {
			.#{$bp}\:cols-#{$i} {
				--cols: #{$i};
			}

			.#{$bp}\:col-span-#{$i} {
				grid-column-end: span $i;
			}

			.#{$bp}\:col-start-#{$i} {
				grid-column-start: $i;
			}
		}
	}
}

@if (type-of($rows) == 'number') {
	@for $i from 1 through $rows {
		.rows-#{$i} {
			--rows: #{$i};
		}

		.row-span-#{$i} {
			grid-row-end: span $i;
		}

		.row-start-#{$i} {
			grid-row-start: $i;
		}
	}

	@each $bp, $size in tokens.$breakpoints {
		@media (min-width: $size) {
			@for $i from 1 through $rows {
				.#{$bp}\:cols-#{$i} {
					--rows: #{$i};
				}

				.#{$bp}\:row-span-#{$i} {
					grid-row-end: span $i;
				}

				.#{$bp}\:row-start-#{$i} {
					grid-row-start: $i;
				}
			}
		}
	}
}
